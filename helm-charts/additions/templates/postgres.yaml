{{- if .Values.postgres.enabled }}
{{- $ns := default .Release.Namespace .Values.postgres.namespace }}
{{- $common := default dict .Values.postgres.common }}
{{- $instances := omit .Values.postgres "enabled" "namespace" "common" }}
{{- range $name, $pg := $instances }}
{{- if (default true $pg.enabled) }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $name }}
  namespace: {{ $ns }}
spec:
  type: {{ default "ClusterIP" $pg.serviceType }}
  selector:
    app: {{ $name }}
  ports:
    - name: postgres
      port: {{ default 5432 $pg.port }}
      targetPort: {{ default 5432 $pg.port }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $name }}-headless
  namespace: {{ $ns }}
spec:
  clusterIP: None
  selector:
    app: {{ $name }}
  ports:
    - name: postgres
      port: {{ default 5432 $pg.port }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $name }}
  namespace: {{ $ns }}
spec:
  serviceName: {{ $name }}-headless
  replicas: {{ default 1 $pg.replicas }}
  selector:
    matchLabels:
      app: {{ $name }}
  template:
    metadata:
      labels:
        app: {{ $name }}
        {{- with $common.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      automountServiceAccountToken: {{ default false $common.automountServiceAccountToken }}
      {{- with $common.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        fsGroup: {{ default 999 $common.fsGroup }}
      {{- if not $pg.affinity }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: {{ default "group" $common.nodeSelectorKey }}
                    operator: In
                    values: [ "{{ default "NotAttacker" $pg.nodeGroup }}" ]
      {{- else }}
      affinity:
        {{- toYaml $pg.affinity | nindent 8 }}
      {{- end }}
      initContainers:
        - name: init-perms
          image: {{ default "busybox:1.36" $common.initImage }}
          command: ["sh","-c",{{ printf "%q" (default "set -eux\nmkdir -p /var/lib/postgresql/data /var/run/postgresql /tmp\nchown -R 999:999 /var/lib/postgresql/data /var/run/postgresql /tmp\nchmod 0775 /var/run/postgresql" $common.initScript) }}]
          securityContext:
            runAsUser: 0
            allowPrivilegeEscalation: false
            seccompProfile: { type: RuntimeDefault }
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: run
              mountPath: /var/run/postgresql
            - name: tmp
              mountPath: /tmp
      containers:
        - name: postgres
          image: {{ required (printf "missing .postgres.%s.image" $name) $pg.image }}
          imagePullPolicy: {{ default "IfNotPresent" $common.imagePullPolicy }}
          {{- with (coalesce $pg.resources $common.resources) }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: {{ default 5432 $pg.port }}
              name: postgres
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: {{ default "username" $pg.secretUserKey }}
                  name: {{ required (printf "missing .postgres.%s.secretName" $name) $pg.secretName }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ default "password" $pg.secretPasswordKey }}
                  name: {{ $pg.secretName }}
            - name: POSTGRES_DB
              value: {{ required (printf "missing .postgres.%s.db" $name) $pg.db | quote }}
          securityContext:
            runAsNonRoot: true
            runAsUser: {{ default 999 $common.runAsUser }}
            runAsGroup: {{ default 999 $common.runAsGroup }}
            readOnlyRootFilesystem: {{ default true $common.readOnlyRootFilesystem }}
            allowPrivilegeEscalation: false
            seccompProfile: { type: RuntimeDefault }
            capabilities:
              drop: ["ALL"]
          readinessProbe:
            exec:
              command: ["sh","-c",{{ printf "%q" (default "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 -p 5432" $common.readinessCmd) }}]
            initialDelaySeconds: {{ default 5 $common.readinessInitialDelaySeconds }}
            periodSeconds: {{ default 5 $common.readinessPeriodSeconds }}
          livenessProbe:
            exec:
              command: ["sh","-c",{{ printf "%q" (default "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 -p 5432" $common.livenessCmd) }}]
            initialDelaySeconds: {{ default 30 $common.livenessInitialDelaySeconds }}
            periodSeconds: {{ default 10 $common.livenessPeriodSeconds }}
            failureThreshold: {{ default 6 $common.livenessFailureThreshold }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: run
              mountPath: /var/run/postgresql
            - name: tmp
              mountPath: /tmp
      {{- if $pg.persistence }}
      volumes: []
      {{- else }}
      volumes:
        - name: data
          emptyDir: {}
        - name: run
          emptyDir: { medium: Memory }
        - name: tmp
          emptyDir: {}
      {{- end }}
  {{- if $pg.persistence }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ default "10Gi" $pg.persistence.size }}
        {{- with $pg.persistence.storageClass }}
        storageClassName: {{ . }}
        {{- end }}
  {{- end }}
{{- end }}
{{- end }}
{{- end }}
