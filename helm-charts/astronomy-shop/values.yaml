# yaml-language-server: $schema=./values.schema.json
default:
  # List of environment variables applied to all components
  env:
    #- name: OTEL_LOGS_EXPORTER
    #  value: otlp.mem
    - name: OTEL_SERVICE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: "metadata.labels['app.kubernetes.io/component']"
    - name: OTEL_COLLECTOR_NAME
      value: otel-collector.mem
    - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      value: cumulative
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: 'service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version={{ .Chart.AppVersion }}'
  # Allows overriding and additions to .Values.default.env
  envOverrides: []
  #  - name: OTEL_K8S_NODE_NAME
  #    value: "someConstantValue"
  image:
    repository: registry:5000
    # Overrides the image tag whose default is the chart appVersion.
    # The service's name will be applied to the end of this value.
    tag: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  # Default # of replicas for all components
  replicas: 1
  # default revisionHistoryLimit for all components (number of old ReplicaSets to retain)
  revisionHistoryLimit: 10
  # Default schedulingRules for all components
  schedulingRules:
    nodeSelector: {}
    affinity: {}
    tolerations: []
  # Default securityContext for all components
  securityContext: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

components:
  ## Demo Components are named objects (services) with several properties
  # demoService:
  ## Enable the component (service)
  #   enabled: true
  #   useDefault:
  ## Use default environment variables
  #     env: true
  ## Override Image repository and Tag. Tag will use appVersion as default.
  ## Component's name will be applied to end of this value.
  #   imageOverride: {}
  ## Optional service definitions to apply
  #   service:
  ## Service Type to use for this component. Default is ClusterIP.
  #     type: ClusterIP
  ## Service Port to use to expose this component. Default is nil
  #     port: 8080
  ## Service Node Port to use to expose this component on a NodePort service. Default is nil
  #     nodePort: 30080
  ## Service Annotations to add to this component
  #     annotations: {}
  ## Additional service ports to use to expose this component
  #   ports:
  #     - name: extraServicePort
  #       value: 8081
  ## Environment variables to add to the component's pod
  #   env:
  ## Environment variables that upsert (append + merge) into the `env` specification for this component.
  ## A variable named OTEL_RESOURCE_ATTRIBUTES_EXTRA will have its value appended to the OTEL_RESOURCE_ATTRIBUTES value.
  #   envOverrides:
  ## Pod Scheduling rules for nodeSelector, affinity, or tolerations.
  #   schedulingRules:
  #     nodeSelector: {}
  #     affinity: {}
  #     tolerations: []
  ## Pod Annotations to add to this component
  #   podAnnotations: {}
  ## Resources for this component
  #   resources: {}
  ## Container security context for setting user ID (UID), group ID (GID) and other security policies
  #   securityContext:
  ## Ingresses rules to add for the to the component
  # ingress:
  ## Enable the creation of Ingress rules. Default is false
  #   enabled: false
  ## Annotations to add to the ingress rule
  #   annotations: {}
  ## Which Ingress class (controller) to use. Default is unspecified.
  #   ingressClassName: nginx
  ## Hosts definitions for the Ingress rule
  #   hosts:
  #     - host: demo.example.com
  ## Each host can have multiple paths/routes
  #       paths:
  #         - path: /
  #           pathType: Prefix
  #           port: 8080
  ## Optional TLS specifications for the Ingress rule
  #   tls:
  #     - secretName: demo-tls
  #       hosts:
  #         - demo.example.com
  ## Additional ingresses - only created if ingress.enabled is true
  ## Useful for when differently annotated ingress services are required
  ## Each additional ingress needs key "name" set to something unique
  #   additionalIngresses: []
  #     - name: extra-demo-ingress
  #       ingressClassName: nginx
  #       annotations: {}
  #       hosts:
  #         - host: demo.example.com
  #           paths:
  #             - path: /
  #               pathType: Prefix
  #               port: 8080
  #       tls:
  #         - secretName: demo-tls
  #           hosts:
  #             - demo.example.com
  ## Command to use in the container spec, in case you don't want to go with the default command from the image.
  #   command: []
  ## Configuration to for this component; will create a Volume, and Mount backed by an optionally created ConfigMap.
  ## The name, mountPath are required, and one of existingConfigMap or data is required.
  ## If an existing ConfigMap is not provided, the contents under data will be used for the created ConfigMap.
  #   mountedConfigMaps: []
  #     - name: my-config
  #       mountPath: /etc/config
  #       subPath:
  #       existingConfigMap: my-configmap
  #       data:
  #         my-config.yaml: |
  #           key: value
  # # Kubernetes container health check options
  #   livenessProbe: {}
  # # Optional init container to run before the pod starts.
  #   initContainers:
  #     - name: <init-container-name>
  #       image: <init-container-image>
  #       command: [list of commands for the init container to run]
  # # Replicas for the component
  #  replicas: 1
  # # Number of old ReplicaSets to retain
  #  revisionHistoryLimit: 10
  # # Optional pod security context for setting user ID (UID), group ID (GID) and other security policies
  # # This will be applied at pod level, can be applied globally for all pods: .Values.default.podSecurityContext
  # # Or it can be applied to a specific component: .Values.components.<component-name>.podSecurityContext
  #    podSecurityContext:
  #      runAsGroup: 65534
  #      runAsNonRoot: true
  #      runAsUser: 65534

  accounting:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    env:
      - name: KAFKA_ADDR
        value: kafka:9092
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
    resources:
      limits:
        memory: 120Mi
    initContainers:
      - name: wait-for-kafka
        image: busybox:latest
        command: ["sh", "-c", "until nc -z -v -w30 kafka 9092; do echo waiting for kafka; sleep 2; done;"]

  ad:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: AD_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: flagd.mem
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
      - name: OTEL_LOGS_EXPORTER
        value: otlp
    resources:
      limits:
        memory: 300Mi

  auth:
    enabled: false
    namespace: "app"
    useDefault:
      env: false
    service:
      port: 8080
    env:
      - name: DB_HOST
        value: "postgres-auth.dat"
      - name: DB_NAME
        value: "users"
      - name: DB_USER
        value: "testuser"
      - name: DB_PASS
        value: "testpassword"
      - name: DB_PORT
        value: "5432"
      - name: JWT_EXP_MINUTES
        value: "60"
      - name: JWT_ALG
        value: "HS256"
      - name: JWT_SECRET
        value: "CHANGEME_SUPER_SECRET"
    resources:
      limits:
        memory: 500Mi
    initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ["sh", "-c"]
        args:
          - |
            until pg_isready -U testuser -d usersdb -h postgres-auth.dat -p 5432; do
              echo "waiting for postgres..."
              sleep 2
            done

  cart:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: CART_PORT
        value: "8080"
      - name: ASPNETCORE_URLS
        value: http://*:$(CART_PORT)
      - name: VALKEY_ADDR
        value: valkey-cart.dat:6379
      - name: FLAGD_HOST
        value: flagd.mem
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
    resources:
      limits:
        memory: 160Mi
    initContainers:
      - name: wait-for-valkey-cart
        image: busybox:latest
        command: ["sh", "-c", "until nc -z -v -w30 valkey-cart.dat 6379; do echo waiting for valkey-cart; sleep 2; done;"]

  checkout:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    ports:
      - value: 8080
        targetPort: 8081
    env:
      - name: CHECKOUT_PORT
        value: "8080"
      - name: CART_ADDR
        value: cart:8080
      - name: CURRENCY_ADDR
        value: currency:8080
      - name: EMAIL_ADDR
        value: http://email:8080
      - name: PAYMENT_ADDR
        value: "localhost:18081" #payment.pay:8080
      - name: PRODUCT_CATALOG_ADDR
        value: product-catalog:8080
      - name: SHIPPING_ADDR
        value: shipping:8080
      - name: KAFKA_ADDR
        value: kafka:9092
      - name: FLAGD_HOST
        value: flagd.mem
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
    securityContext:
      runAsUser: 0
      runAsGroup: 0
      allowPrivilegeEscalation: true
      runAsNonRoot: false
    podSecurityContext:
      runAsUser: 0
      runAsGroup: 0
      fsGroup: 0
      runAsNonRoot: false
    resources:
      limits:
        memory: 1Gi
    initContainers:
      - name: wait-for-kafka
        image: busybox:latest
        command: ["sh", "-c", "until nc -z -v -w30 kafka 9092; do echo waiting for kafka; sleep 2; done;"]
      - name: wait-for-flagd
        image: busybox:latest
        command: ["sh", "-c", "until nc -z -v -w30 flagd.mem 8013; do echo waiting for flagd; sleep 2; done;"]
    sidecarContainers:
      - name: crypto-ingress
        imageOverride:
          repository: "registry:5000/sidecar-enc"
        useDefault:
          env: false
        env:
          - name: MODE
            value: ingress
          - name: LISTEN_ADDR
            value: ":8081"
          - name: UPSTREAM_URL
            value: "localhost:8080"   # inoltra all’app locale
          - name: FLAGD_HOST
            value: "flagd.mem"
          - name: FLAGD_PORT
            value: "8013"
          - name: FLAG_KEY
            value: "cryptoWord"
          - name: HEADER_NAME
            value: "X-Auth-Token"
      - name: crypto-egress
        imageOverride:
          repository: "registry:5000/sidecar-enc"
        useDefault:
          env: false
        env:
          - name: MODE
            value: egress
          - name: LISTEN_ADDR
            value: ":18081"
          - name: UPSTREAM_URL
            value: "payment.pay:8080"     # proxy ingress di payment
          - name: FLAGD_HOST
            value: "flagd.mem"
          - name: FLAGD_PORT
            value: "8013"
          - name: FLAG_KEY
            value: "cryptoWord"
          - name: HEADER_NAME
            value: "X-Auth-Token"

  currency:
    enabled: false
    namespace: "app"
    serviceAccountName: "acc-app"
    useDefault:
      env: true
    ports:
      - name: "grpc"
        value: 8080
      - name: "http"
        value: 8081
    schedulingRules:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: group
                  operator: In
                  values: ["NodeAttacker"]
    env:
      - name: CURRENCY_PORT
        value: "8080"
      - name: EXPOSE_HTTP_PORT
        value: "8081"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: VERSION
        value: "{{ .Chart.AppVersion }}"
      - name: DB_HOST
        value: postgres.dat
      - name: DB_NAME
        value: currency
      - name: DB_USER
        valueFrom:
          secretKeyRef:
            name: dbcurrency-creds
            key: username
      - name: DB_PASS
        valueFrom:
          secretKeyRef:
            name: dbcurrency-creds
            key: password
      - name: DB_PORT
        value: "5432"
    resources:
      limits:
        memory: 20Mi
    initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ["sh", "-c"]
        args:
          - |
            until pg_isready -U postgres -d currency -h postgres.dat -p 5432; do
              echo "waiting for postgres..."
              sleep 2
            done

  email:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: EMAIL_PORT
        value: "8080"
      - name: APP_ENV
        value: production
      - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
    resources:
      limits:
        memory: 100Mi

  fraud-detection:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    env:
      - name: KAFKA_ADDR
        value: kafka:9092
      - name: FLAGD_HOST
        value: flagd.mem
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
    resources:
      limits:
        memory: 300Mi
    initContainers:
      - name: wait-for-kafka
        image: busybox:latest
        command: ["sh", "-c", "until nc -z -v -w30 kafka 9092; do echo waiting for kafka; sleep 2; done;"]

  frontend:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: FRONTEND_PORT
        value: "8080"
      - name: FRONTEND_ADDR
        value: :8080
      - name: AD_ADDR
        value: ad:8080
      - name: CART_ADDR
        value: cart:8080
      - name: CHECKOUT_ADDR
        value: "localhost:18080" #checkout:8080
      - name: CURRENCY_ADDR
        value: currency:8080
      - name: PRODUCT_CATALOG_ADDR
        value: product-catalog:8080
      - name: RECOMMENDATION_ADDR
        value: recommendation:8080
      - name: SHIPPING_ADDR
        value: shipping:8080
      - name: AUTH_BASE_URL
        value: "http://auth:8080"
      - name: FLAGD_HOST
        value: flagd.mem
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_COLLECTOR_HOST
        value: $(OTEL_COLLECTOR_NAME)
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: WEB_OTEL_SERVICE_NAME
        value: frontend-web
      - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: http://localhost:8080/otlp-http/v1/traces             # This expects users to use `kubectl port-forward ...`
    resources:
      limits:
        memory: 250Mi
    securityContext:
      runAsUser: 1001  # nextjs
      runAsGroup: 1001
      runAsNonRoot: true
    mountedEmptyDirs:
      - name: sa-public
        mountPath: /app/public/var/run/secrets/kubernetes.io/serviceaccount
    initContainers:
      - name: copy-sa
        image: busybox:1.36
        command: ["/bin/sh", "-c"]
        args:
          - >
            set -eu;
            cp -a /var/run/secrets/kubernetes.io/serviceaccount/. /target/;
      - name: wait-for-flagd
        image: busybox:latest
        command: ["sh", "-c", "until nc -z -v -w30 flagd.mem 8013; do echo waiting for flagd; sleep 2; done;"]
        volumeMounts:
          - name: sa-public
            mountPath: /target
    sidecarContainers:
      - name: crypto-egress
        imageOverride:
          repository: "registry:5000/sidecar-enc"
        useDefault:
          env: false
        env:
          - name: MODE
            value: egress
          - name: LISTEN_ADDR
            value: ":18080"
          - name: UPSTREAM_URL
            value: "checkout:8080"   # parla al proxy ingress di checkout
          - name: FLAGD_HOST
            value: "flagd.mem"
          - name: FLAGD_PORT
            value: "8013"
          - name: FLAG_KEY
            value: "cryptoWord"
          - name: HEADER_NAME
            value: "X-Auth-Token"

  frontend-proxy:
    enabled: false
    namespace: "dmz"
    useDefault:
      env: true
    service:
      type: LoadBalancer
      loadBalancerIP: "172.18.0.200"
      port: 8080
    env:
      - name: ENVOY_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: flagd.mem
      - name: FLAGD_PORT
        value: "8013"
      - name: FLAGD_UI_HOST
        value: flagd.mem
      - name: FLAGD_UI_PORT
        value: "4000"
      - name: FRONTEND_HOST
        value: frontend.app
      - name: FRONTEND_PORT
        value: "8080"
      - name: GRAFANA_HOST
        value: grafana.mem
      - name: GRAFANA_PORT
        value: "80"
      - name: IMAGE_PROVIDER_HOST
        value: image-provider
      - name: IMAGE_PROVIDER_PORT
        value: "8081"
      - name: JAEGER_HOST
        value: jaeger-query.mem
      - name: JAEGER_PORT
        value: "16686"
      - name: OTEL_COLLECTOR_HOST
        value: $(OTEL_COLLECTOR_NAME)
      - name: OTEL_COLLECTOR_PORT_GRPC
        value: "4317"
      - name: OTEL_COLLECTOR_PORT_HTTP
        value: "4318"
    resources:
      limits:
        memory: 65Mi
    securityContext:
      runAsUser: 101  # envoy
      runAsGroup: 101
      runAsNonRoot: true

  image-provider:
    enabled: false
    namespace: "dmz"
    useDefault:
      env: true
    service:
      port: 8081
    env:
      - name: IMAGE_PROVIDER_PORT
        value: "8081"
      - name: OTEL_COLLECTOR_PORT_GRPC
        value: "4317"
      - name: OTEL_COLLECTOR_HOST
        value: $(OTEL_COLLECTOR_NAME)
      - name: LOG_INTERVAL_SECONDS
        value: "1"
    resources:
      limits:
        memory: 50Mi

  load-generator:
    enabled: false
    namespace: "web"
    useDefault:
      env: true
    service:
      port: 8089
    env:
      - name: LOCUST_WEB_HOST
        value: "0.0.0.0"
      - name: LOCUST_WEB_PORT
        value: "8089"
      - name: LOCUST_USERS
        value: "10"
      - name: LOCUST_SPAWN_RATE
        value: "1"
      - name: LOCUST_HOST
        value: http://frontend-proxy:8080
      - name: LOCUST_HEADLESS
        value: "false"
      - name: LOCUST_AUTOSTART
        value: "true"
      - name: LOCUST_BROWSER_TRAFFIC_ENABLED
        value: "true"
      - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
        value: python
      - name: FLAGD_HOST
        value: flagd.mem
      - name: FLAGD_OFREP_PORT
        value: "8016"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
    resources:
      limits:
        memory: 1500Mi

  payment:
    enabled: false
    namespace: "pay"
    useDefault:
      env: true
    ports:
      - value: 8080
        targetPort: 8081
    env:
      - name: PAYMENT_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: flagd.mem
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: PGHOST
        value: postgres-payment.dat
      - name: PGPORT
        value: "5432"
      - name: PGDATABASE
        value: payments
      - name: PGUSER
        value: payments_rw
      - name: PGPASSWORD
        value: payments_rw_pwd
    resources:
      limits:
        memory: 120Mi
    securityContext:
      runAsUser: 1000  # node
      runAsGroup: 1000
      runAsNonRoot: true
    initContainers:
      - name: wait-for-flagd
        image: busybox:latest
        command: ["sh", "-c", "until nc -z -v -w30 flagd.mem 8013; do echo waiting for flagd; sleep 2; done;"]
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ["sh", "-c"]
        args:
          - |
            until pg_isready -U payments_rw -d payments -h postgres-payment.dat -p 5432; do
              echo "waiting for postgres..."
              sleep 2
            done
    sidecarContainers:
      - name: crypto-ingress
        imageOverride:
          repository: "registry:5000/sidecar-enc"
        useDefault:
          env: false
        env:
          - name: MODE
            value: ingress
          - name: LISTEN_ADDR
            value: ":8081"
          - name: UPSTREAM_URL
            value: "localhost:8080"
          - name: FLAGD_HOST
            value: "flagd.mem"
          - name: FLAGD_PORT
            value: "8013"
          - name: FLAG_KEY
            value: "cryptoWord"
          - name: HEADER_NAME
            value: "X-Auth-Token"

  product-catalog:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: PRODUCT_CATALOG_PORT
        value: "8080"
      - name: PRODUCT_CATALOG_RELOAD_INTERVAL
        value: "10"
      - name: FLAGD_HOST
        value: flagd.mem
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
    mountedConfigMaps:
      - name: product-catalog-products
        mountPath: /usr/src/app/products
        existingConfigMap: product-catalog-products
    resources:
      limits:
        memory: 20Mi

  quote:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: QUOTE_PORT
        value: "8080"
      - name: OTEL_PHP_AUTOLOAD_ENABLED
        value: "true"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
    resources:
      limits:
        memory: 40Mi
    securityContext:
      runAsUser: 33  # www-data
      runAsGroup: 33
      runAsNonRoot: true

  recommendation:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: RECOMMENDATION_PORT
        value: "8080"
      - name: PRODUCT_CATALOG_ADDR
        value: product-catalog:8080
      - name: OTEL_PYTHON_LOG_CORRELATION
        value: "true"
      - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
        value: python
      - name: FLAGD_HOST
        value: flagd.mem
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
    resources:
      limits:
        memory: 500Mi            # This is high to enable supporting the recommendationCache feature flag use case

  shipping:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: SHIPPING_PORT
        value: "8080"
      - name: QUOTE_ADDR
        value: http://quote:8080
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
    resources:
      limits:
        memory: 20Mi

  smtp:
    enabled: false
    namespace: "dmz"
    hostNetwork: true
    useDefault:
      env: false
    ports:
      - name: ssh
        value: 22
      - name: ofrep
        value: 25
    schedulingRules:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: group
                  operator: In
                  values: ["NodeAttacker"]
    volumeMounts:
      - name: socket
        mountPath: /host/run/containerd/containerd.sock
        mountPropagation: HostToContainer
    additionalVolumes:
      - name: socket
        hostPath:
          path: /run/containerd/containerd.sock
          type: Socket

  flagd:
    enabled: false
    namespace: "mem"
    useDefault:
      env: true
    replicas: 1
    ports:
      - name: rpc
        value: 8013
      - name: ofrep
        value: 8016
    env:
      - name: FLAGD_METRICS_EXPORTER
        value: otel
      - name: FLAGD_OTEL_COLLECTOR_URI
        value: $(OTEL_COLLECTOR_NAME):4317
    resources:
      limits:
        memory: 75Mi
    command:
      - "/flagd-build"
      - "start"
      - "--port"
      - "8013"
      - "--ofrep-port"
      - "8016"
      - "--uri"
      - "file:./etc/flagd/demo.flagd.json"
    mountedEmptyDirs:
      - name: config-rw
        mountPath: /etc/flagd
    # flagd-ui as a sidecar container in the same pod so the flag json file can be shared
    sidecarContainers:
      - name: flagd-ui
        useDefault:
          env: true
        service:
          port: 4000
        env:
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: FLAGD_UI_USER
            valueFrom:
              configMapKeyRef:
                name: flagd-credentials-ui
                key: FLAGD_UI_USER
          - name: FLAGD_UI_PASS
            valueFrom:
              configMapKeyRef:
                name: flagd-credentials-ui
                key: FLAGD_UI_PASS
        resources:
          limits:
            memory: 100Mi
        volumeMounts:
          - name: config-rw
            mountPath: /app/data
    initContainers:
      - name: init-config
        image: busybox
        command: ["sh", "-c", "cp /config-ro/demo.flagd.json /config-rw/demo.flagd.json && cat /config-rw/demo.flagd.json"]
        volumeMounts:
          - mountPath: /config-ro
            name: config-ro
          - mountPath: /config-rw
            name: config-rw
    additionalVolumes:
      - name: config-ro
        configMap:
          name: flagd-config

  kafka:
    enabled: false
    namespace: "app"
    useDefault:
      env: true
    replicas: 1
    ports:
      - name: plaintext
        value: 9092
      - name: controller
        value: 9093
    env:
      - name: KAFKA_ADVERTISED_LISTENERS
        value: PLAINTEXT://kafka:9092
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
      - name: KAFKA_HEAP_OPTS
        value: "-Xmx400M -Xms400M"
    resources:
      limits:
        memory: 600Mi
    securityContext:
      runAsUser: 1000  # appuser
      runAsGroup: 1000
      runAsNonRoot: true

  test-image:
    enabled: false
    namespace: "tst"
    useDefault:
      env: false
    replicas: 1
    imageOverride:
      repository: malicious:5000/attacker
    env:
      - name: CALDERA_URL
        value: "http://caldera.dock:8888"
      - name: GROUP
        value: cluster

  traffic-controller:
    enabled: false
    namespace: "mem"
    serviceAccountName: "acc-mem"
    useDefault:
      env: true
    replicas: 1
    resources:
      limits:
        memory: 20Mi
    securityContext:
      privileged: true
    imageOverride:
      repository: "registry:5000/controller"
    ports:
      - value: 8080
    schedulingRules:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: group
                  operator: In
                  values: ["NodeAttacker"]
    volumeMounts:
      - name: hostroot
        mountPath: /host
        mountPropagation: HostToContainer
    additionalVolumes:
      - name: hostroot
        hostPath:
          path: /
          type: Directory
    env:
      - name: OPENSEARCH_URL
        value: "http://opensearch:9200"
      - name: LOG_INTERVAL_SECONDS
        value: "5"
      - name: OTEL_SERVICE_NAME
        value: "traffic-controller"
      - name: LOG_SEVERITY_TEXT
        value: "info"
      - name: SCRIPT_NAME
        value: "synthetic-log.sh"
    initContainers:
      - name: wait-for-opensearch
        image: busybox:latest
        command:
          - /bin/sh
          - -c
          - |
            echo "Waiting for OpenSearch..."
            until nc -z -v -w5 opensearch.mem 9200; do
              echo "OpenSearch not ready yet..."
              sleep 5
            done
            echo "OpenSearch is up!"
    sidecarContainers:
      - name: traffic-translator
        imageOverride:
          repository: "registry:5000/traffic-translator"
        useDefault:
          env: false
        env:
        - name: DEFAULT_PLAINTEXT
          value: "true"
        - name: DEFAULT_TIMEOUT_S
          value: "10"
        resources:
          requests: { cpu: 50m, memory: 64Mi }
          limits:   { cpu: 200m, memory: 256Mi }
        readinessProbe:
          httpGet: { path: /healthz, port: http }
          initialDelaySeconds: 2
          periodSeconds: 5
        livenessProbe:
          httpGet: { path: /healthz, port: http }
          initialDelaySeconds: 5
          periodSeconds: 10

  valkey-cart:
    enabled: false
    namespace: "dat"
    useDefault:
      env: true
    replicas: 1
    ports:
      - name: valkey-cart
        value: 6379
    resources:
      limits:
        memory: 20Mi
    securityContext:
      runAsUser: 999  # valkey
      runAsGroup: 1000
      runAsNonRoot: true
