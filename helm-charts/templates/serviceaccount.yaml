{{- if .Values.serviceAccount.create -}}
apiVersion: v1
kind: ServiceAccount
metadata:
  {{- $_ := set . "serviceAccount" .Values.serviceAccount }}
  name: {{ include "otel-demo.serviceAccountName" . }}
  labels:
    {{- include "otel-demo.labels" . | nindent 4 }}
  {{- if .Values.serviceAccount.annotations }}
  annotations:
    {{- range $key, $value := .Values.serviceAccount.annotations }}
    {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
    {{- end }}
  {{- end }}
{{- end }}
{{- if .Values.serviceAccount.createRbac -}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: role-tst
  namespace: tst
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: role-dmz
  namespace: dmz
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  resourceNames: ["frontend-proxy", "image-provider"]
  verbs: ["get", "update", "patch"]
- apiGroups: [""]
  resources: ["services"]
  resourceNames: ["frontend-proxy", "image-provider"]
  verbs: ["get", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: role-coredns
  namespace: kube-system
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["coredns"]
  verbs: ["get", "list", "watch", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: traffic-controller-dmz
  namespace: dmz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: role-dmz
subjects:
- kind: ServiceAccount
  name: acc-dmz
  namespace: dmz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: traffic-controller-tst
  namespace: tst
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: role-tst
subjects:
- kind: ServiceAccount
  name: acc-dmz
  namespace: dmz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: traffic-controller-ks
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: role-coredns
subjects:
- kind: ServiceAccount
  name: acc-dmz
  namespace: dmz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: allow-proxy-everywhere
rules:
  - apiGroups: [""]
    resources:
      - pods/proxy
      - services/proxy
      - nodes/proxy        # proxy verso kubelet
    verbs: ["create"]
  # “scoprire” oggetti senza conoscere i nomi:
  - apiGroups: [""]
    resources:
      - pods
      - services
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: proxy-all-namespaces-binding
subjects:
  - kind: ServiceAccount
    name: acc-app
    namespace: app
roleRef:
  kind: ClusterRole
  name: allow-proxy-everywhere
  apiGroup: rbac.authorization.k8s.io
{{- end }}
