apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: honeypot-app
build:
  local:
    push: true
    useBuildkit: true
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_VERSION}}"
  artifacts:
#    - image: registry:5000/accounting
#      context: .
#      docker:
#        dockerfile: src/accounting/Dockerfile
#    - image: registry:5000/ad
#      context: .
#      docker:
#        dockerfile: src/ad/Dockerfile
#        buildArgs:
#          OTEL_JAVA_AGENT_VERSION: "{{.OTEL_JAVA_AGENT_VERSION}}"
#          AD_PORT: "{{.AD_PORT}}"
    - image: registry:5000/attacker
      context: src/attacker
      docker:
        dockerfile: src/attacker/Dockerfile
#    - image: registry:5000/auth
#      context: src/auth
#      docker:
#        dockerfile: src/auth/Dockerfile
    - image: registry:5000/caldera
      context: src/caldera
      docker:
        dockerfile: src/caldera/Dockerfile
        buildArgs:
          VARIANT: full
#    - image: registry:5000/caldera-controller
#      context: src/caldera-controller
#      docker:
#        dockerfile: src/caldera-controller/Dockerfile
#        buildArgs:
#          DEFAULT_GROUP: "cluster"
#          DEFAULT_ADV_NAME: "KC0 â€“ Prova"
#          DEFAULT_CALDERA_URL: "http://localhost:8888"
#          UID: "10001"
#    - image: registry:5000/cart
#      context: .
#      docker:
#        dockerfile: src/cart/src/Dockerfile
#        buildArgs:
#          CART_PORT: "{{.CART_PORT}}"
#    - image: registry:5000/checkout
#      context: .
#      docker:
#        dockerfile: src/checkout/Dockerfile
#        buildArgs:
#          CHECKOUT_PORT: "{{.CHECKOUT_PORT}}"
#    - image: registry:5000/controller
#      context: src/controller
#      docker:
#        dockerfile: src/controller/Dockerfile
#    - image: registry:5000/currency
#      context: .
#      docker:
#        dockerfile: src/currency/Dockerfile
#        buildArgs:
#          OPENTELEMETRY_CPP_VERSION: "{{.OPENTELEMETRY_CPP_VERSION}}"
#          CURRENCY_PORT: "{{.CURRENCY_PORT}}"
#          EXPOSE_HTTP_PORT: "{{.CURRENCY_MIRROR_PORT}}"
#    - image: registry:5000/email
#      context: .
#      docker:
#        dockerfile: src/email/Dockerfile
#        buildArgs:
#          EMAIL_PORT: "{{.EMAIL_PORT}}"
#    - image: registry:5000/flagd
#      context: .
#      docker:
#        dockerfile: src/flagd/Dockerfile
#    - image: registry:5000/flagd-ui
#      context: .
#      docker:
#        dockerfile: src/flagd-ui/Dockerfile
#        buildArgs:
#          FLAGD_UI_PORT: "{{.FLAGD_UI_PORT}}"
#    - image: registry:5000/fraud-detection
#      context: .
#      docker:
#        dockerfile: src/fraud-detection/Dockerfile
#        buildArgs:
#          OTEL_JAVA_AGENT_VERSION: "{{.OTEL_JAVA_AGENT_VERSION}}"
#    - image: registry:5000/frontend
#      context: .
#      docker:
#        dockerfile: src/frontend/Dockerfile
#    - image: registry:5000/frontend-proxy
#      context: .
#      docker:
#        dockerfile: src/frontend-proxy/Dockerfile
#    - image: registry:5000/image-provider
#      context: .
#      docker:
#        dockerfile: src/image-provider/Dockerfile
#        buildArgs:
#          IMAGE_PROVIDER_PORT: "{{.IMAGE_PROVIDER_PORT}}"
#          OTEL_COLLECTOR_HOST: "{{.OTEL_COLLECTOR_HOST}}"
#          OTEL_COLLECTOR_PORT_GRPC: "{{.OTEL_COLLECTOR_PORT_GRPC}}"
#          OTEL_SERVICE_NAME: "{{.OTEL_SERVICE_NAME}}"
#    - image: registry:5000/image-updater
#      context: src/image-updater
#      docker:
#        dockerfile: src/image-updater/Dockerfile
#    - image: registry:5000/kafka
#      context: .
#      docker:
#        dockerfile: src/kafka/Dockerfile
#    - image: registry:5000/load-generator
#      context: .
#      docker:
#        dockerfile: src/load-generator/Dockerfile
#    - image: registry:5000/payment
#      context: .
#      docker:
#        dockerfile: src/payment/Dockerfile
#        buildArgs:
#          PAYMENT_PORT: "{{.PAYMENT_PORT}}"
#    - image: registry:5000/postgres
#      context: src/postgres-currency
#      docker:
#        dockerfile: src/postgres-currency/Dockerfile
#    - image: registry:5000/postgres-auth
#      context: src/postgres-auth
#      docker:
#        dockerfile: src/postgres-auth/Dockerfile
#    - image: registry:5000/postgres-payment
#      context: src/postgres-payment
#      docker:
#        dockerfile: src/postgres-payment/Dockerfile
#    - image: registry:5000/product-catalog
#      context: .
#      docker:
#        dockerfile: src/product-catalog/Dockerfile
#        buildArgs:
#          PRODUCT_CATALOG_PORT: "{{.PRODUCT_CATALOG_PORT}}"
#    - image: registry:5000/quote
#      context: .
#      docker:
#        dockerfile: src/quote/Dockerfile
#        buildArgs:
#          QUOTE_PORT: "{{.QUOTE_PORT}}"
#    - image: registry:5000/recommendation
#      context: .
#      docker:
#        dockerfile: src/recommendation/Dockerfile
#        buildArgs:
#          RECOMMENDATION_PORT: "{{.RECOMMENDATION_PORT}}"
#    - image: registry:5000/shipping
#      context: .
#      docker:
#        dockerfile: src/shipping/Dockerfile
#        buildArgs:
#          SHIPPING_PORT: "{{.SHIPPING_PORT}}"
#    - image: registry:5000/sidecar-enc
#      context: src/sidecar-enc
#      docker:
#        dockerfile: src/sidecar-enc/Dockerfile
#    - image: registry:5000/sidecar-mal
#      context: src/sidecar-mal
#      docker:
#        dockerfile: src/sidecar-mal/Dockerfile
#    - image: registry:5000/valkey-cart
#      context: .
#      docker:
#        dockerfile: src/valkey-cart/Dockerfile
#    - image: registry:5000/traffic-translator
#      context: src/traffic-translator
#      docker:
#        dockerfile: src/traffic-translator/Dockerfile
deploy:
  helm:
    releases:
      - name: honeypot-test
        chartPath: helm-charts
        namespace: "{{.TST_NAMESPACE}}"
        createNamespace: true
        setValueTemplates:
          #Abilitations
          components.test-image.enabled: "true"
          serviceAccount.create: "true"
          #Values
          serviceAccount.name: "acc-tst"
        valuesFiles:
          - helm-charts/values.yaml
      - name: honeypot-dmz
        chartPath: helm-charts
        namespace: "{{.DMZ_NAMESPACE}}"
        createNamespace: true
        setValueTemplates:
          #Abilitations
          serviceAccount.create: "true"
          components.frontend-proxy.enabled: "true"
          components.image-provider.enabled: "true"
          #Values
          serviceAccount.name: "acc-dmz"
          serviceAccount.role.name: "role-dmz"
        valuesFiles:
          - helm-charts/values.yaml
      - name: honeypot-data
        chartPath: helm-charts
        namespace: "{{.DAT_NAMESPACE}}"
        createNamespace: true
        setValueTemplates:
          #Abilitations
          serviceAccount.create: "true"
          components.valkey-cart.enabled: "true"
          postgres.enabled: "true"
          #Values
          serviceAccount.name: "acc-dat"
        valuesFiles:
          - helm-charts/values.yaml
      - name: honeypot-payment
        chartPath: helm-charts
        namespace: "{{.PAY_NAMESPACE}}"
        createNamespace: true
        setValueTemplates:
          #Abilitations
          serviceAccount.create: "true"
          components.payment.enabled: "true"
          #Values
          serviceAccount.name: "acc-pay"
        valuesFiles:
          - helm-charts/values.yaml
      - name: honeypot-mem
        chartPath: helm-charts
        namespace: "{{.MEM_NAMESPACE}}"
        createNamespace: true
        setValueTemplates:
          #Abilitations
          serviceAccount.create: "true"
          components.flagd.enabled: "true"
          opentelemetry-collector.enabled: "true"
          jaeger.enabled: "true"
          prometheus.enabled: "true"
          grafana.enabled: "true"
          opensearch.enabled: "true"
          imageUpdater.enabled: "true"
          components.traffic-controller.enabled: "true"
          #Values
          imageUpdater.registry.address: "{{.REGISTRY_IMG}}"
          serviceAccount.name: "acc-mem"
        valuesFiles:
          - helm-charts/values.yaml
      - name: honeypot-app
        chartPath: helm-charts
        namespace: "{{.APP_NAMESPACE}}"
        createNamespace: true
        setValueTemplates:
          #Abilitations
          serviceAccount.create: "true"
          components.accounting.enabled: "true"
          components.ad.enabled: "true"
          components.auth.enabled: "true"
          components.cart.enabled: "true"
          components.checkout.enabled: "true"
          components.currency.enabled: "true"
          components.email.enabled: "true"
          components.fraud-detection.enabled: "true"
          components.frontend.enabled: "true"
          components.product-catalog.enabled: "true"
          components.quote.enabled: "true"
          components.recommendation.enabled: "true"
          components.shipping.enabled: "true"
          components.kafka.enabled: "true"
          #Values
          serviceAccount.name: "acc-app"
      - name: honeypot-web
        chartPath: helm-charts
        namespace: "{{.WEB_NAMESPACE}}"
        createNamespace: true
        setValueTemplates:
          #Abilitations
          serviceAccount.create: "true"
          serviceAccount.createRbac: "true"
          #networkPolicies.enabled: "true"
          components.load-generator.enabled: "true"
          caldera.enabled: "true"
          #Values
          serviceAccount.name: "acc-web"
          caldera.ip: "{{.CALDERA_IP}}"
        valuesFiles:
          - helm-charts/values.yaml
portForward:
  - resourceType: service
    resourceName: frontend-proxy
    namespace: "{{.DMZ_NAMESPACE}}"
    port: 8080
    localPort: 8080
  - resourceType: service
    resourceName: caldera-proxy
    namespace: "{{.WEB_NAMESPACE}}"
    port: 8888
    localPort: 8888